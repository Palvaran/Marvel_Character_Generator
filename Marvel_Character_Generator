#Subject:  Marvel Super Heroes Player's Book Character Generator
#Author:   Palvaran
#Website:  ideasquantified.com
#Inspiration:  https://en.wikipedia.org/wiki/Marvel_Super_Heroes_(role-playing_game)

import random, time

char_stats = []

# Generating Origins
origin_outcomes = {i: 'Altered Human' for i in range(1, 31)}
origin_outcomes.update({i: 'Mutant' for i in range(31, 61)})
origin_outcomes.update({i: 'Hi-Tech' for i in range(61, 91)})
origin_outcomes.update({i: 'Robot' for i in range(91, 96)})
origin_outcomes.update({i: 'Alien' for i in range(96, 101)})

# Powers counter
powers_outcomes = {i: 2 for i in range(1, 21)}
powers_outcomes.update({i: 3 for i in range(21, 61)})
powers_outcomes.update({i: 4 for i in range(61, 91)})
powers_outcomes.update({i: 5 for i in range(91, 101)})

# Talents counter
talents_outcomes = {i: 1 for i in range(1, 21)}
talents_outcomes.update({i: 2 for i in range(21, 61)})
talents_outcomes.update({i: 3 for i in range(61, 91)})
talents_outcomes.update({i: 4 for i in range(91, 101)})

# Contacts counter
contacts_outcomes = {i: 0 for i in range(1, 21)}
contacts_outcomes.update({i: 1 for i in range(21, 61)})
contacts_outcomes.update({i: 2 for i in range(61, 91)})
contacts_outcomes.update({i: 3 for i in range(91, 101)})

# Generating FASERIP_Rank1 (Altered Humans and Mutants)
faserip_rank1_outcomes = {i: 'Feeble' for i in range(1, 6)}
faserip_rank1_outcomes.update({i: 'Poor' for i in range(6, 11)})
faserip_rank1_outcomes.update({i: 'Typical' for i in range(11, 21)})
faserip_rank1_outcomes.update({i: 'Good' for i in range(21, 41)})
faserip_rank1_outcomes.update({i: 'Excellent' for i in range(41, 61)})
faserip_rank1_outcomes.update({i: 'Remarkable' for i in range(61, 81)})
faserip_rank1_outcomes.update({i: 'Incredible' for i in range(81, 97)})
faserip_rank1_outcomes.update({i: 'Amazing' for i in range(97, 101)})

# Generating FASERIP_Rank3 (High Technology)
faserip_rank3_outcomes = {i: 'Feeble' for i in range(1, 6)}
faserip_rank3_outcomes.update({i: 'Poor' for i in range(6, 11)})
faserip_rank3_outcomes.update({i: 'Typical' for i in range(11, 41)})
faserip_rank3_outcomes.update({i: 'Good' for i in range(41, 81)})
faserip_rank3_outcomes.update({i: 'Excellent' for i in range(81, 96)})
faserip_rank3_outcomes.update({i: 'Remarkable' for i in range(96, 101)})

# Generating FASERIP_Rank4 (Robots)
faserip_rank4_outcomes = {i: 'Feeble' for i in range(1, 6)}
faserip_rank4_outcomes.update({i: 'Poor' for i in range(6, 11)})
faserip_rank4_outcomes.update({i: 'Typical' for i in range(11, 16)})
faserip_rank4_outcomes.update({i: 'Good' for i in range(16, 41)})
faserip_rank4_outcomes.update({i: 'Excellent' for i in range(41, 51)})
faserip_rank4_outcomes.update({i: 'Remarkable' for i in range(51, 71)})
faserip_rank4_outcomes.update({i: 'Incredible' for i in range(71, 91)})
faserip_rank4_outcomes.update({i: 'Amazing' for i in range(91, 99)})
faserip_rank4_outcomes.update({i: 'Monstrous' for i in range(99, 101)})

#Generating FASERIP_Rank5 (Aliens)
faserip_rank5_outcomes = {i: 'Feeble' for i in range(1, 11)}
faserip_rank5_outcomes.update({i: 'Poor' for i in range(11, 21)})
faserip_rank5_outcomes.update({i: 'Typical' for i in range(21, 31)})
faserip_rank5_outcomes.update({i: 'Good' for i in range(31, 41)})
faserip_rank5_outcomes.update({i: 'Excellent' for i in range(41, 61)})
faserip_rank5_outcomes.update({i: 'Remarkable' for i in range(61, 71)})
faserip_rank5_outcomes.update({i: 'Incredible' for i in range(71, 81)})
faserip_rank5_outcomes.update({i: 'Amazing' for i in range(81, 96)})
faserip_rank5_outcomes.update({i: 'Monstrous' for i in range(96, 101)})

def get_origin(roll):
    if roll not in origin_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return origin_outcomes[roll]

def get_faserip_rank1(roll):
    if roll not in faserip_rank1_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return faserip_rank1_outcomes[roll]

def get_faserip_rank3(roll):
    if roll not in faserip_rank3_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return faserip_rank3_outcomes[roll]

def get_faserip_rank4(roll):
    if roll not in faserip_rank4_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return faserip_rank4_outcomes[roll]

def get_faserip_rank5(roll):
    if roll not in faserip_rank5_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return faserip_rank5_outcomes[roll]

def get_powers(roll):
    if roll not in powers_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return powers_outcomes[roll]

def get_talents(roll):
    if roll not in talents_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talents_outcomes[roll]

def get_contacts(roll):
    if roll not in contacts_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return contacts_outcomes[roll]

def print_stats():
    print('')
    print('Origin: ' + char_origin)
    print('')
    print('Primary Abilities:')
    print('------------------')
    print('Fighting: ' + char_stats[0])
    print('Agility: ' + char_stats[1])
    print('Strength: ' + char_stats[2])
    print('Endurance: ' + char_stats[3])
    print('Reason: ' + char_stats[4])
    print('Intuition: ' + char_stats[5])
    print('Psyche: ' + char_stats[6])
    print('')
    print('Secondary Abilities:')
    print('--------------------')
    print('Health: ' + str(health))
    print('Karma: ' + str(karma))  
    print('')
    print('Special Abilities:')
    print('------------------')
    print('Powers: ' + str(char_powers) + ' Powers')
    print('Talents: ' + str(char_talents) + ' Talents')
    print('Contacts: ' + str(char_contacts) + ' Contacts')

fase_dict = {}
rip_dict = {}
initial_rank_numbers = {
    'Feeble': 1, 'Poor': 3, 'Typical': 5, 'Good': 8, 'Excellent': 16, 'Remarkable': 26, 'Incredible': 36, 'Amazing': 46, 'Monstrous': 63
     }

origin_roll = random.randint(1, 100)
char_origin = get_origin(origin_roll)

#FASERIP counter
for counter in range(1,8):
    if char_origin == 'Altered Human':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_origin == 'Mutant':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_origin == 'Hi-Tech':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank3(faserip_roll)
        char_stats.append(char_faserip)
    elif char_origin == 'Robot':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank4(faserip_roll)
        char_stats.append(char_faserip)
    elif char_origin == 'Alien':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank5(faserip_roll)
        char_stats.append(char_faserip)
    else:
        print('Debug')

powers_roll = random.randint(1, 100)
char_powers = get_powers(powers_roll)
talents_roll = random.randint(1, 100)
char_talents = get_talents(talents_roll)
contacts_roll = random.randint(1, 100)
char_contacts = get_contacts(contacts_roll)

#Slice FASERIP
FASE = char_stats[0:4]
RIP = char_stats[4:7]

#Count FASERIP
for c in range(len(FASE)):
    fase_dict[FASE[c]] = FASE.count(
        FASE[c]
        )
for c in range(len(RIP)):
    rip_dict[RIP[c]] = RIP.count(
        RIP[c]
        )

fase_list = fase_dict.items()
rip_list = rip_dict.items()
health = 0
karma = 0

#Calculating Health via Tuple
FASE_tuple = tuple(FASE)
for k in (FASE_tuple):
    if k == 'Feeble':
        health = health + 1
    elif k == 'Poor':
        health = health + 3
    elif k == 'Typical':
        health = health + 5
    elif k == 'Good':
        health = health + 8
    elif k == 'Excellent':
        health = health + 16
    elif k == 'Remarkable':
        health = health + 26
    elif k == 'Incredible':
        health = health + 36
    elif k == 'Amazing':
        health = health + 46
    elif k == 'Monstrous':
        health = health + 63
    else:
        print('in progress')

#Calculating Karma via Tuple
RIP_tuple = tuple(RIP)
for k in (RIP_tuple):
    if k == 'Feeble':
        karma = karma + 1
    elif k == 'Poor':
        karma = karma + 3
    elif k == 'Typical':
        karma = karma + 5
    elif k == 'Good':
        karma = karma + 8
    elif k == 'Excellent':
        karma = karma + 16
    elif k == 'Remarkable':
        karma = karma + 26
    elif k == 'Incredible':
        karma = karma + 36
    elif k == 'Amazing':
        karma = karma + 46
    elif k == 'Monstrous':
        karma = karma + 63
    else:
        print('in progress')

print('Begin the Character Creation Process!')
print('Generating Origins...')
print('You are ... ')
time.sleep(1)
print_stats()
